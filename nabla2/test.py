# AUTOGENERATED! DO NOT EDIT! File to edit: 99_tests.ipynb (unless otherwise specified).

__all__ = ['get_test_resources']

# Cell
import numpy as np
import torch
import torchvision
from time import time
from torchvision import datasets, transforms
from torch import nn, optim


# Cell
def get_test_resources(force_cpu=False):
    if force_cpu:
        device = torch.device("cpu")
    else:
        device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    transform = transforms.Compose([transforms.ToTensor(),
                                  transforms.Normalize((0.5,), (0.5,)),
                                  ])

    trainset = datasets.MNIST('resources/mnist/train', download=True, train=True, transform=transform)
    valset = datasets.MNIST('resources/mnist/test', download=True, train=False, transform=transform)
    trainloader = torch.utils.data.DataLoader(trainset, batch_size=64, shuffle=True)
    valloader = torch.utils.data.DataLoader(valset, batch_size=64, shuffle=True)

    dls = {
        'train':trainloader,
        'test':valloader,
        'valid':valloader,
    }

    input_size = 784
    hidden_sizes = [128, 64]
    output_size = 10

    class Loss(nn.Module):
        def __init__(self):
            super().__init__()
            self.loss_fn = nn.CrossEntropyLoss()
        def forward(self,x,y):
            loss = self.loss_fn(x,y)
            return loss,loss

    model = nn.Sequential(nn.Linear(input_size, hidden_sizes[0]),
                          nn.ReLU(),
                          nn.Linear(hidden_sizes[0], hidden_sizes[1]),
                          nn.ReLU(),
                          nn.Linear(hidden_sizes[1], output_size)
                         )
    model = model.to(device)
    optimizer = optim.SGD(model.parameters(), lr=0.003, momentum=0.9)
    loss_func = Loss()
    return model,dls,loss_func,optimizer,device
